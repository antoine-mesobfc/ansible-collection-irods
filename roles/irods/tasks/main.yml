---
# tasks file for role irods

- name: Include OS-specific variables
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"

# iRODS server settings

- name: Include service account
  ansible.builtin.include_tasks: service-account.yml

- name: Setup iRODS CentOS Yum repository
  ansible.builtin.yum_repository:
    name: "renci-irods"
    description: "RENCI iRODS Repository"
    baseurl: "https://packages.irods.org/yum/pool/el$releasever/$basearch"
    enabled: true
    gpgkey: "https://packages.irods.org/irods-signing-key.asc"
    gpgcheck: true
  when: ansible_os_family == 'RedHat'

- name: Ensure "gpg-agent" is installed (Ubuntu)
  ansible.builtin.apt:
    name: gpg-agent
    update_cache: true
  when: ansible_distribution == 'Ubuntu'

- name: Ensure "ca-certificates" is up-to-date (Ubuntu)
  ansible.builtin.apt:
    name: ca-certificates
    state: latest  # noqa package-latest
  when: ansible_distribution == 'Ubuntu'

- name: Setup iRODS Ubuntu apt repository key
  ansible.builtin.apt_key:
    id: 9014FF9F75C66C771F1CB574BD925DBDACF9B42B
    url: https://packages.irods.org/irods-signing-key.asc
    state: present
  when: ansible_distribution == 'Ubuntu'

- name: Setup iRODS Ubuntu 18.04 (bionic) apt repository
  ansible.builtin.apt_repository:
    filename: "renci-irods"
    repo: "deb [arch=amd64] https://packages.irods.org/apt/ bionic main"
    state: present
  when:
    - ansible_distribution == 'Ubuntu'
    - ansible_distribution_version == '18.04'

- name: Install iRODS server packages
  ansible.builtin.package:
    pkg:
      - "{{ irods_server_pkgname }}"
      - "{{ irods_runtime_pkgname }}"
      - "{{ irods_icommands_pkgname }}"
      - "{{ irods_database_pkgname }}"

- name: Install plugin version-locked (RedHat)
  ansible.builtin.package:
    state: present
    name: python3-dnf-plugin-versionlock
  when: ansible_os_family == 'RedHat'

- name: Ensure iRODS server packages are version-locked (RedHat)
  community.general.dnf_versionlock:
    state: present
    name:
      - "{{ irods_server_pkgname }}"
      - "{{ irods_runtime_pkgname }}"
      - "{{ irods_icommands_pkgname }}"
      - "{{ irods_database_pkgname }}"
  when: ansible_os_family == 'RedHat'

- name: Ensure iRODS server packages are version-locked (Ubuntu)
  ansible.builtin.dpkg_selections:
    selection: hold
    name:
      - "{{ irods_server_pkgname }}"
      - "{{ irods_runtime_pkgname }}"
      - "{{ irods_icommands_pkgname }}"
      - "{{ irods_database_pkgname }}"
  when:
    - ansible_distribution == 'Ubuntu'

- name: Ensure iRODS various directories ownership
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: 0755
    owner: irods
    group: irods
  loop:
    - "/etc/irods"
    - "/var/lib/irods"
    - "/var/lib/irods/log"

- name: Install iRODS server setup file
  ansible.builtin.template:
    src: "templates/setup_irods.json.j2"
    dest: "/etc/irods/setup_irods.json"
    mode: 0600
    owner: irods
    group: irods
  when: ansible_role_irods_is_catalog

- name: Check SSL certificate availability
  ansible.builtin.file:
    path: "{{ item.path }}"
    mode: "{{ item.mode }}"
    owner: irods
    group: irods
  loop:
    - {"path": "{{ irods_ssl_certificate_chain_file }}", "mode": "0644"}
    - {"path": "{{ irods_ssl_certificate_key_file }}", "mode": "u+r"}
    - {"path": "{{ irods_ssl_ca_certificate_file }}", "mode": "0644"}
  when:
    - irods_cs_ssl

- name: Verify DH params file presence
  ansible.builtin.command:
    cmd: "openssl dhparam -2 -out {{ irods_ssl_dh_params_file }} 2048"
    creates: "{{ irods_ssl_dh_params_file }}"
  when:
    - irods_cs_ssl

- name: Set correct acPreconnect rule
  ansible.builtin.lineinfile:
    path: /etc/irods/core.re
    regexp: '^\s*acPreConnect\(\*OUT\) \{ \*OUT=".*"; \}$'
    line: 'acPreConnect(*OUT) { *OUT="CS_NEG_REQUIRE"; }'
  when: irods_cs_ssl
  notify: Restart irods

# do this first because it's nice to have a running catalog when you want to
# start a resource server
- name: Initialize iRODS distribution for IES (catalog server)
  ansible.builtin.include_tasks: irods-configure-ies.yml
  when:
    - ansible_role_irods_is_catalog

# trigger handlers for catalog
- name: Flush handlers
  ansible.builtin.meta: flush_handlers

# then configure other servers
- name: Initialize iRODS distribution for non-IES (resource only server)
  ansible.builtin.include_tasks: irods-configure-nonies.yml
  when:
    - not ansible_role_irods_is_catalog
